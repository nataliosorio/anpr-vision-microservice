version: "3.9"

services:
  anpr-worker-qa:
    build:
      context: ../.. 
      dockerfile: Dockerfile
    container_name: anpr-worker-qa
    env_file:
      - .env
    working_dir: /app
    volumes:
      - ../../:/app
      - ../../models:/app/models
    command: python -m src.workers.main_worker
    depends_on:
      - kafka-qa
    networks:
      - anpr-net-qa
    tty: true
    restart: unless-stopped

  kafka-qa:
    image: bitnamilegacy/kafka:4.0.0
    container_name: kafka-qa
    ports:
      - "${KAFKA_PORT_INTERNAL}:${KAFKA_PORT_INTERNAL}"
      - "${KAFKA_PORT_EXTERNAL}:${KAFKA_PORT_EXTERNAL}"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:${KAFKA_PORT_INTERNAL},CONTROLLER://:9093,PLAINTEXT_HOST://:${KAFKA_PORT_EXTERNAL}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-qa:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-qa:${KAFKA_PORT_INTERNAL},PLAINTEXT_HOST://localhost:${KAFKA_PORT_EXTERNAL}
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka_data_qa:/bitnami/kafka
    networks:
      - anpr-net-qa
    restart: unless-stopped

  kafka-init-qa:
    image: bitnamilegacy/kafka:4.0.0
    container_name: kafka-init-qa
    depends_on:
      - kafka-qa
    env_file:
      - .env
    entrypoint: >
      bash -c "
        echo 'Esperando Kafka QA...';
        for i in $(seq 1 60); do
          /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${KAFKA_BROKER} --list >/dev/null 2>&1 && { echo 'Kafka listo'; break; }
          sleep 1;
        done;
        echo 'Creando t√≥pico ${KAFKA_TOPIC}...';
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --bootstrap-server ${KAFKA_BROKER} --replication-factor 1 --partitions 3 --topic ${KAFKA_TOPIC} --if-not-exists;
      "
    networks:
      - anpr-net-qa

  kafka-ui-qa:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-qa
    ports:
      - "8180:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: qa
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-qa:${KAFKA_PORT_INTERNAL}
    depends_on:
      - kafka-qa
    networks:
      - anpr-net-qa

volumes:
  kafka_data_qa:

networks:
  anpr-net-qa:
    driver: bridge

